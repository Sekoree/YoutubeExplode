using System;
using System.Collections.Generic;
using System.Net;
using System.Net.Http;
using System.Text.Json;
using System.Threading.Tasks;
using YoutubeExplode.Utils;
using YoutubeExplode.Utils.Extensions;

namespace YoutubeExplode.Videos.ClosedCaptions.Resolving
{
    internal class ClosedCaptionManifestResolver
    {
        private readonly HttpClient _httpClient;
        private readonly VideoId _videoId;
        private readonly Cache _cache = new();

        public ClosedCaptionManifestResolver(HttpClient httpClient, VideoId videoId)
        {
            _httpClient = httpClient;
            _videoId = videoId;
        }

        private ValueTask<IReadOnlyDictionary<string, string>> GetVideoInfoAsync() => _cache.WrapAsync(async () =>
        {
            var eurl = WebUtility.HtmlEncode($"https://youtube.googleapis.com/v/{_videoId}");

            var url = $"https://youtube.com/get_video_info?video_id={_videoId}&el=embedded&eurl={eurl}&hl=en";
            var raw = await _httpClient.GetStringAsync(url);

            return (IReadOnlyDictionary<string, string>) Url.SplitQuery(raw);
        });

        private ValueTask<JsonElement> GetPlayerResponseAsync() => _cache.WrapAsync(async () =>
        {
            var videoInfo = await GetVideoInfoAsync();

            return Json.Parse(videoInfo["player_response"]);
        });

        public ValueTask<IReadOnlyList<ClosedCaptionTrackInfo>> GetClosedCaptionTracksAsync() =>
            _cache.WrapAsync(async () =>
            {
                var playerResponse = await GetPlayerResponseAsync();

                var result = new List<ClosedCaptionTrackInfo>();

                var tracksJson = playerResponse
                    .GetPropertyOrNull("captions")?
                    .GetPropertyOrNull("playerCaptionsTracklistRenderer")?
                    .GetPropertyOrNull("captionTracks")?
                    .EnumerateArray() ?? default;

                foreach (var trackJson in tracksJson)
                {
                    var url = trackJson
                        .GetProperty("baseUrl")
                        .GetString();

                    var languageCode = trackJson
                        .GetProperty("languageCode")
                        .GetString();

                    var languageName = trackJson
                        .GetProperty("name")
                        .GetProperty("simpleText")
                        .GetString();

                    var isAutoGenerated = trackJson
                        .GetProperty("vssId")
                        .GetString()
                        .StartsWith("a.", StringComparison.OrdinalIgnoreCase);

                    var track = new ClosedCaptionTrackInfo(
                        url,
                        new Language(languageCode, languageName),
                        isAutoGenerated
                    );

                    result.Add(track);
                }

                return (IReadOnlyList<ClosedCaptionTrackInfo>) result;
            });
    }
}